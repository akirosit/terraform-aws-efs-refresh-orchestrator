{
  "Comment": "A description of my state machine",
  "StartAt": "defaults-values",
  "States": {
    "defaults-values": {
      "Type": "Pass",
      "Next": "merge-tags",
      "ResultPath": "$.defaultValues",
      "Parameters": {
        "Tags": {
          "refresh": "true",
          "refresh-efs.$": "$.SourceEFSId"
        }
      }
    },
    "merge-tags": {
      "Type": "Pass",
      "Next": "RESTORE",
      "ResultPath": "$.allTags",
      "Parameters": {
        "Tags.$": "States.JsonMerge($.defaultValues.Tags, $.Tags, false)"
      }
    },
    "RESTORE": {
      "Type": "Pass",
      "Next": "get-source-efs-arn"
    },
    "get-source-efs-arn": {
      "Type": "Task",
      "Next": "get-latest-recovery-point",
      "Parameters": {
        "FileSystemId.$": "$.SourceEFSId"
      },
      "Resource": "arn:aws:states:::aws-sdk:efs:describeFileSystems",
      "ResultSelector": {
        "FileSystemArn.$": "$.FileSystems[0].FileSystemArn",
        "FileSystemId.$": "$.FileSystems[0].FileSystemId"
      },
      "ResultPath": "$.get-source-efs-arn-result"
    },
    "get-latest-recovery-point": {
      "Type": "Task",
      "Next": "start-restore-job",
      "Parameters": {
        "ResourceArn.$": "$.get-source-efs-arn-result.FileSystemArn"
      },
      "Resource": "arn:aws:states:::aws-sdk:backup:listRecoveryPointsByResource",
      "ResultPath": "$.get-latest-recovery-point",
      "ResultSelector": {
        "RecoveryPointArn.$": "$.RecoveryPoints[0].RecoveryPointArn",
        "RecoveryPointCreationDate.$": "$.RecoveryPoints[0].CreationDate"
      }
    },
    "start-restore-job": {
      "Type": "Task",
      "Next": "wait-restore-done",
      "Parameters": {
        "IamRoleArn.$": "$.AWSBackupRoleArn",
        "Metadata": {
          "file-system-id.$": "$.get-source-efs-arn-result.FileSystemId",
          "Encrypted.$": "$.Encrypted",
          "KmsKeyId.$": "$.KmsKeyId",
          "PerformanceMode": "generalPurpose",
          "CreationToken.$": "States.UUID()",
          "newFileSystem.$": "$.newFileSystem",
          "ItemsToRestore.$": "$.ItemsToRestore"
        },
        "RecoveryPointArn.$": "$.get-latest-recovery-point.RecoveryPointArn"
      },
      "Resource": "arn:aws:states:::aws-sdk:backup:startRestoreJob",
      "ResultPath": "$.start-restore-job-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime",
            "States.TaskFailed"
          ],
          "ResultPath": "$.start-restore-job-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "wait-restore-done": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "get-restore-status"
    },
    "get-restore-status": {
      "Type": "Task",
      "Next": "outcome-restore-status",
      "Parameters": {
        "RestoreJobId.$": "$.start-restore-job-result.RestoreJobId"
      },
      "Resource": "arn:aws:states:::aws-sdk:backup:describeRestoreJob",
      "ResultPath": "$.get-restore-status-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.start-restore-job-errormsg",
          "Next": "wait-restore-done"
        }
      ]
    },
    "outcome-restore-status": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.get-restore-status-result.Status",
          "StringEquals": "COMPLETED",
          "Next": "transform-restore-status-result"
        }
      ],
      "Default": "wait-restore-done"
    },
    "transform-restore-status-result": {
      "Type": "Pass",
      "Next": "tag-restored-efs",
      "Parameters": {
        "FileSystemArn.$": "$.get-restore-status-result.CreatedResourceArn",
        "FileSystemId.$": "States.ArrayGetItem(States.StringSplit($['get-restore-status-result']['CreatedResourceArn'], '/'),1)",
        "Status.$": "$.get-restore-status-result.Status"
      },
      "ResultPath": "$.get-restore-status-result"
    },
    "tag-restored-efs": {
      "Type": "Task",
      "Parameters": {
        "ResourceARNList.$": "States.Array($['get-restore-status-result']['FileSystemArn'])",
        "Tags.$": "$.allTags.Tags"
      },
      "Resource": "arn:aws:states:::aws-sdk:resourcegroupstaggingapi:tagResources",
      "ResultPath": "$.tag-restored-efs-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime",
            "States.TaskFailed"
          ],
          "ResultPath": "$.tag-restored-efs-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ],
      "Next": "choice-delete-old-efs"
    },
    "choice-delete-old-efs": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.DeleteOldEfs",
          "BooleanEquals": true,
          "Next": "DELETE-OLD-EFS"
        }
      ],
      "Default": "POST-RESTORE"
    },
    "DELETE-OLD-EFS": {
      "Comment": "Post-restore steps",
      "Type": "Pass",
      "Next": "get-old-efs-arn"
    },
    "get-old-efs-arn": {
      "Type": "Task",
      "Next": "check-efs-to-replace-tags",
      "Parameters": {
        "FileSystemId.$": "$.SourceEFSId"
      },
      "Resource": "arn:aws:states:::aws-sdk:efs:describeFileSystems",
      "ResultSelector": {
        "FileSystemArn.$": "$.FileSystems[0].FileSystemArn",
        "FileSystemId.$": "$.FileSystems[0].FileSystemId"
      },
      "ResultPath": "$.get-old-efs-arn-result"
    },
    "check-efs-to-replace-tags": {
      "Type": "Task",
      "Next": "outcome-check-efs-to-replace-tags",
      "Resource": "arn:aws:states:::aws-sdk:efs:listTagsForResource",
      "Parameters": {
        "ResourceId.$": "$.get-old-efs-arn-result.FileSystemArn"
      },
      "ResultSelector": {
        "TagRefresh.$": "States.ArrayGetItem($.Tags[?(@.Key=='refresh')].Value,0)"
      },
      "ResultPath": "$.check-efs-to-replace-tags-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime",
            "States.TaskFailed"
          ],
          "ResultPath": "$.check-efs-to-replace-tags-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "outcome-check-efs-to-replace-tags": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-efs-to-replace-tags-result.TagRefresh",
          "StringEquals": "true",
          "Next": "delete-old-efs"
        }
      ],
      "Default": "update-dynamodb-failure"
    },
    "delete-old-efs": {
      "Type": "Task",
      "Next": "POST-RESTORE",
      "Parameters": {
        "FileSystemId.$": "$.get-old-efs-arn-result.FileSystemId"
      },
      "Resource": "arn:aws:states:::aws-sdk:efs:deleteFileSystem",
      "ResultPath": "$.delete-old-efs-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime",
            "States.TaskFailed"
          ],
          "ResultPath": "$.delete-old-efs-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "POST-RESTORE": {
      "Type": "Pass",
      "Next": "create-efs-access-point"
    },
    "create-efs-access-point": {
      "Type": "Task",
      "Next": "wait-efs-access-point",
      "Parameters": {
        "ClientToken.$": "States.UUID()",
        "FileSystemId.$": "$.get-restore-status-result.FileSystemId"
      },
      "Resource": "arn:aws:states:::aws-sdk:efs:createAccessPoint",
      "ResultPath": "$.create-efs-access-point-result"
    },
    "wait-efs-access-point": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "get-efs-access-point"
    },
    "get-efs-access-point": {
      "Type": "Task",
      "Next": "outcome-efs-access-point",
      "Parameters": {
        "AccessPointId.$": "$.create-efs-access-point-result.AccessPointId"
      },
      "Resource": "arn:aws:states:::aws-sdk:efs:describeAccessPoints",
      "ResultPath": "$.get-efs-access-point-result",
      "ResultSelector": {
        "AccessPoint.$": "$.AccessPoints[0]"
      }
    },
    "outcome-efs-access-point": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.get-efs-access-point-result.AccessPoint.LifeCycleState",
          "StringEquals": "available",
          "Next": "get-mount-targets"
        },
        {
          "Variable": "$.get-efs-access-point-result.AccessPoint.LifeCycleState",
          "StringEquals": "creating",
          "Next": "wait-efs-access-point"
        }
      ],
      "Default": "update-dynamodb-failure"
    },
    "get-mount-targets": {
      "Type": "Task",
      "Next": "outcome-get-mount-targets",
      "Parameters": {
        "AccessPointId.$": "$.get-efs-access-point-result.AccessPoint.AccessPointId"
      },
      "Resource": "arn:aws:states:::aws-sdk:efs:describeMountTargets",
      "ResultPath": "$.get-mount-targets-result"
    },
    "outcome-get-mount-targets": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.get-mount-targets-result.MountTargets[0]",
          "IsPresent": true,
          "Next": "map-create-mount-target"
        }
      ],
      "Default": "map-update-mount-target"
    },
    "map-create-mount-target": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "create-mount-target",
        "States": {
          "create-mount-target": {
            "Type": "Task",
            "End": true,
            "Parameters": {
              "FileSystemId.$": "$.get-restore-status-result.FileSystemId",
              "SubnetId.$": "$$.Map.Item",
              "SecurityGroups.$": "$.SecurityGroupID"
            },
            "Resource": "arn:aws:states:::aws-sdk:efs:createMountTarget"
          }
        }
      },
      "Next": "update-lambda-efs-function",
      "ItemsPath": "$.SubnetIDs",
      "ItemSelector": {
        "FileSystemId": "MyData",
        "SubnetId": "MyData"
      },
      "ResultPath": "$.map-create-mount-target-result"
    },
    "map-update-mount-target": {
      "Type": "Map",
      "ItemsPath": "$.get-mount-targets-result.MountTargets",
      "ItemSelector": {
        "FileSystemId.$": "$.get-restore-status-result.FileSystemId",
        "AccessPointId.$": "$.get-efs-access-point-result.AccessPoint.AccessPointId",
        "MountTargetId.$": "$$.Map.Item.Value.MountTargetId",
        "SubnetId.$": "$$.Map.Item.Value.SubnetId",
        "SecurityGroupID.$": "$.SecurityGroupID"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "get-mount-target-sg",
        "States": {
          "get-mount-target-sg": {
            "Type": "Task",
            "Next": "update-mount-target-sg",
            "Parameters": {
              "MountTargetId.$": "$.MountTargetId"
            },
            "Resource": "arn:aws:states:::aws-sdk:efs:describeMountTargetSecurityGroups",
            "ResultPath": "$.get-mount-target-sg-result"
          },
          "update-mount-target-sg": {
            "Type": "Task",
            "End": true,
            "Parameters": {
              "MountTargetId.$": "$.MountTargetId",
              "SecurityGroups.$": "States.StringToJson(States.Format('[{},{}]', States.ArrayGetItem(States.StringSplit(States.JsonToString($['get-mount-target-sg-result']['SecurityGroups']), '[]'),0), States.ArrayGetItem(States.StringSplit(States.JsonToString($['SecurityGroupID']), '[]'),0)))"
            },
            "Resource": "arn:aws:states:::aws-sdk:efs:modifyMountTargetSecurityGroups"
          }
        }
      },
      "ResultPath": "$.map-create-mount-target-result",
      "Next": "update-lambda-efs-function",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime",
            "States.TaskFailed"
          ],
          "ResultPath": "$.map-create-mount-target-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "update-lambda-efs-function": {
      "Type": "Task",
      "Next": "get-lambda-config",
      "Parameters": {
        "FunctionName.$": "$.LambdaEfsFunction",
        "FileSystemConfigs": [
          {
            "Arn.$": "$.create-efs-access-point-result.AccessPointArn",
            "LocalMountPath": "/mnt/efs"
          }
        ]
      },
      "Resource": "arn:aws:states:::aws-sdk:lambda:updateFunctionConfiguration",
      "ResultPath": "$.update-lambda-efs-function-result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime",
            "States.TaskFailed"
          ],
          "ResultPath": "$.delete-old-efs-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "get-lambda-config": {
      "Type": "Task",
      "Next": "get-efs-restore-backup-directory",
      "Parameters": {
        "FunctionName.$": "$.LambdaEfsFunction"
      },
      "Resource": "arn:aws:states:::aws-sdk:lambda:getFunctionConfiguration",
      "ResultPath": "$.get-lambda-config-output"
    },
    "get-efs-restore-backup-directory": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName.$": "$.LambdaEfsFunction",
        "Payload": {
          "EFSArn.$": "$.get-restore-status-result.FileSystemArn",
          "LocalMountPath": "/mnt/efs"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.EFSMountFailureException",
            "FileNotFoundError"
          ],
          "IntervalSeconds": 5,
          "MaxAttempts": 5,
          "BackoffRate": 2
        }
      ],
      "Next": "choice-store-efs-metadata-in-ssm-parameter-store",
      "ResultPath": "$.get-efs-restore-backup-directory-result",
      "ResultSelector": {
        "EfsRestoreDir.$": "States.StringToJson($.Payload.body)"
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.Runtime",
            "States.TaskFailed"
          ],
          "ResultPath": "$.get-efs-restore-backup-directory-errormsg",
          "Next": "update-dynamodb-failure"
        }
      ]
    },
    "choice-store-efs-metadata-in-ssm-parameter-store": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.StoreEfsMetadataInSSM",
          "BooleanEquals": true,
          "Next": "update-efs-id-ssm-parameter"
        }
      ],
      "Default": "update-dynamodb"
    },
    "update-efs-id-ssm-parameter": {
      "Type": "Task",
      "Next": "update-efs-sub-path-ssm-parameter",
      "Parameters": {
        "Name.$": "$.EfsIdSSMParameterName",
        "Value.$": "$.get-restore-status-result.FileSystemId",
        "Overwrite": true
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter",
      "ResultPath": "$.update-efs-id-ssm-parameter-result"
    },
    "update-efs-sub-path-ssm-parameter": {
      "Type": "Task",
      "Next": "delete-access-point",
      "Parameters": {
        "Name.$": "$.EfsSubPathSSMParameterName",
        "Value.$": "States.ArrayGetItem($['get-efs-restore-backup-directory-result']['EfsRestoreDir'],0)",
        "Overwrite": true
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter",
      "ResultPath": "$.update-efs-sub-path-ssm-parameter"
    },
    "delete-access-point": {
      "Type": "Task",
      "Next": "update-dynamodb",
      "Parameters": {
        "AccessPointId.$": "$.create-efs-access-point-result.AccessPointId"
      },
      "Resource": "arn:aws:states:::aws-sdk:efs:deleteAccessPoint",
      "ResultPath": "$.delete-access-point-result"
    },
    "update-dynamodb": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName.$": "$.DynamoDBTableName",
        "Item": {
          "appname": {
            "S.$": "$.TagApplication"
          },
          "environment": {
            "S.$": "$.TagEnvironment"
          },
          "instance": {
            "S.$": "$.EFSId"
          },
          "source": {
            "S.$": "$.SourceEFSId"
          },
          "restoretype": {
            "S": "restore-efs-backup"
          },
          "snapshot": {
            "S": "$.RecoveryPoints[0].RecoveryPointArn"
          },
          "status": {
            "S": "completed"
          },
          "restoredate": {
            "S": "$$.State.StartTime"
          },
          "restoretime": {
            "S": "$$.State.EnteredTime"
          }
        }
      },
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.update-dynamodb-result",
      "Next": "send-msg"
    },
    "send-msg": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn.$": "$.SNSTopicArn",
        "Subject.$": "$.SNSSubject",
        "Message.$": "$.SNSMessage"
      },
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.sendmsg-result",
      "Next": "RESTORE-COMPLETE"
    },
    "RESTORE-COMPLETE": {
      "Type": "Pass",
      "End": true
    },
    "update-dynamodb-failure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "TableName.$": "$.DynamoDBTableName",
        "Item": {
          "appname": {
            "S.$": "$.TagApplication"
          },
          "environment": {
            "S.$": "$.TagEnvironment"
          },
          "instance": {
            "S.$": "$.EFSId"
          },
          "source": {
            "S.$": "$.SourceEFSId"
          },
          "restoretype": {
            "S": "restore-efs-backup"
          },
          "snapshot": {
            "S": "$.RecoveryPoints[0].RecoveryPointArn"
          },
          "status": {
            "S": "failed"
          },
          "restoredate": {
            "S": "$$.State.StartTime"
          },
          "restoretime": {
            "S": "$$.State.EnteredTime"
          }
        }
      },
      "ResultPath": "$.update-dynamodb-failure-result",
      "Next": "send-msg-failure"
    },
    "send-msg-failure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "Parameters": {
        "TopicArn.$": "$.SNSTopicArn",
        "Subject.$": "$.SNSSubjectFailure",
        "Message.$": "$.SNSMessageFailure"
      },
      "ResultPath": "$.sendmsg-result",
      "Next": "RESTORE-FAILED"
    },
    "RESTORE-FAILED": {
      "Type": "Fail",
      "Error": "Restore failed",
      "Cause": "One of the states failed. Please check the logs"
    }
  }
}